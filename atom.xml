<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.rinoux.top</id>
    <title>Très bon site</title>
    <updated>2019-05-26T06:56:10.700Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.rinoux.top"/>
    <link rel="self" href="https://blog.rinoux.top/atom.xml"/>
    <subtitle>always share things really sucks...</subtitle>
    <logo>https://blog.rinoux.top/images/avatar.png</logo>
    <icon>https://blog.rinoux.top/favicon.ico</icon>
    <rights>All rights reserved 2019, Très bon site</rights>
    <entry>
        <title type="html"><![CDATA[Executor框架]]></title>
        <id>https://blog.rinoux.top/post/executor-kuang-jia</id>
        <link href="https://blog.rinoux.top/post/executor-kuang-jia">
        </link>
        <updated>2019-05-26T06:28:50.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>Executor框架的UML图如上图所示，Executors作为ExecutorService的工厂类用于创建各种类型的ThreadPool线程池，和上图中的类的关系是持有。</p>
</li>
<li>
<p>Executor接口如下：</p>
</li>
</ul>
<pre><code>public interface Executor {
    void execute(Runnable command);
}
</code></pre>
<p>这意味着Executor的各个实现类都可以通过调用execute方法执行新的任务</p>
<p>ExecutorService接口：</p>
<pre><code>public interface ExecutorService extends Executor {
    void shutdown();//不再接受新任务，并执行完等待队列中的任务
    List&lt;Runnable&gt; shutdownNow();//尝试取消所以执行中的任务，并不再启动队列中的任务
    boolean isShutdown();//判断是否处于关闭状态（已接受shutdown指令，不再接受新任务）
    boolean isTerminated();//判断是否处于终止状态（所有任务中止或结束）
//等待ExecutorService终止状态，调用此方法后会立即调用shutdown
    boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;
    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);
    &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);
    Future&lt;?&gt; submit(Runnable task);
    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
        throws InterruptedException;
    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,
                                  long timeout, TimeUnit unit)
        throws InterruptedException;
    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
        throws InterruptedException, ExecutionException;
    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,
                    long timeout, TimeUnit unit)
        throws InterruptedException, ExecutionException, TimeoutException;
}
</code></pre>
<p>ExecutorService在Executor的基础上添加了生命周期管理、多样化任务执行方法等，一般使用此接口。</p>
<ul>
<li>Executors作为工厂类封装了很多ExecutorService的实现，常用的fixed、cached、single、scheduled都是通过配置ScheduledThreadPoolExecutor或者ThreadPoolExecutor不同参数来实现的。1.8以后加入了newWorkStealingPool，该方法产生一个ForkJoinPool处理分治任务。</li>
<li>Executor是可以被称作为线程池的，更准确讲应该是线程资源池，它并不是为每个任务分配创建线程，而是重用现有的线程，减少线程在创建、销毁、切换的开销，提高处理器的利用率，防止内存耗尽。</li>
<li>通常使用Timer类和TimerTask来执行定时任务，但是Timer存在一些缺陷：
1、<em><strong>Timer在执行所有定时任务时只会创建一个线程</strong></em>，如果某个任务执行过长将会影响TimerTask的定时精确性。
2、如果TimerTask抛出一个未检查的异常，此时Timer的线程将会被中止，尚未执行的定时任务并不会恢复，新任务也不会被调度。这成为线程泄露（Thread Leakage）。</li>
<li>使用ScheduledThreadPoolExecutor来执行定时任务的优点有：
1、STPE基于相对时间来调度任务，而Timer则是基于绝对时间，对时钟敏感。
2、STPE是线程池调度，因此某个定时任务抛出异常并不会影响其它定时任务的执行。</li>
</ul>
]]></content>
    </entry>
</feed>